January 21, 2015 | Leapfrog Technology Nepal
DB Training Assignment

Section I

question1:	The table given below show the description of EMPLOYEES table.
		Employee_Id int, First_Name VARCHAR(50), Last_Name VARCHAR(50), Job_Id VARCHAR(50), Hire_Date, Salary Date, Manager_Id int, Commission_Percent int, Department_Id VARCHAR(10)
Look at the above table description and write queries for following questions.
1. Display First name and Job of all employees who do not earn a commission.
2. Display name, job id and data of hiring of all employees who work in IT department
with the most recent dates appearing first.
3. Display no. of employees in each department, alongside department code, only those
employees with salary greater than 3000.
4. Modify Query 3 such that only departments with more than 15 employees are
displayed.
5. Display total salary of each department, alongside department code, with only
departments with total salary > 10000. If any employee has no departments display
“EXECUTIVE”.January 21, 2015 | Leapfrog Technology Nepal

Answers: 

Ans-1
--> SELECT 
    first_name, job_id
FROM
    employees
WHERE
    commission_percent IS NULL;

Ans-2
-->SELECT 
    CONCAT_WS(' ', first_name, last_name) AS name,
    job_id,
    hire_date
FROM
    employees
WHERE
    department_id = 'IT'
ORDER BY hire_date DESC;

Ans-3
-->SELECT 
    department_id, COUNT(*) AS 'no of employees'
FROM
    employees
WHERE
    salary > 3000
GROUP BY department_id;


Ans-4
-->SELECT 
    department_id, COUNT(*) AS no_of_employees
FROM
    employees
WHERE
    salary > 3000
GROUP BY department_id
HAVING no_of_employees > 1;

Ans-5
-->SELECT 
    COALESCE(department_id, 'EXECUTIVE'),
    SUM(salary) AS Total_Salary
FROM
    employees
GROUP BY department_id
HAVING Total_Salary > 10000;


<<<<-------Section II------>>>

Question 1. Write a query to subtract current date to previous year, but add 2 months.
Answer
SELECT 
    DATE_ADD(DATE_SUB(CURDATE(), INTERVAL 1 YEAR),
        INTERVAL 2 MONTH);



Question 2. Write a query to display output given below using MySQL date functions:
Table Name: tblDATE

Month
Year
January
2013
February
2013
March
2013

Required Output :

Month
Start Date
End Date
Jan-13
01/01/2013
31/01/2013
Feb-13
01/02/2013
28/02/2013
Mar-13
01/03/2013
31/03/2013

Answer
-->SELECT 
    CONCAT_WS('-',
            SUBSTR(month, 1, 3),
            SUBSTR(year, - 2, 2)) AS Month,
    CONCAT_WS('/',
            01,
            MONTH(STR_TO_DATE(SUBSTR(month, 1, 3), '%b')),
            year) AS start_date,
    LAST_DAY(CONCAT_WS('-',
                    year,
                    MONTH(STR_TO_DATE(SUBSTR(month, 1, 3), '%b')),
                    '01')) AS end_date
FROM
    month_year;



<<<←--------------Section III-------------->>>>
Questions
Use Sakila database for all the queries. (Use Subqueries for questions 4, 5 & 6)
1. Select the title and language of all the films with film title starting with ‘A’.
(Tables: film, language)
2. Return the first name, last name and city of all customers who live in Canada. Order
the results first by the last name and then by the first name.
(Tables: customer, address, city, country)
3. Select name of all of the customers who have rented horror movies.
(Tables: customer, rental, inventory, film_category, category)
4. Select full name of all the actors of films along with the film name, which contain
actor with first name ‘JENNIFER’.
5. Select full name of all of the customers who have rented movies in the category
‘Music’.
6. Show all customer ids and full names who have rented a film in every category with
category_id >=5.

Answers
Ans 1)
SELECT 
    film.title, language.name
FROM
    film
        JOIN
    language ON film.language_id = language.language_id
WHERE
    title LIKE 'a%';

Ans 2)
SELECT 
    customer.first_name, customer.last_name, c.city
FROM
    customer
        JOIN
    address AS a ON customer.address_id = a.address_id
        JOIN
    city AS c ON a.city_id = c.city_id
        JOIN
    country coun ON c.country_id = coun.country_id
WHERE
    coun.country = 'canada'
ORDER BY customer.first_name , customer.last_name;


Ans 3)
SELECT 
    CONCAT_WS(' ', first_name, last_name)
FROM
    customer AS c
        JOIN
    rental AS r ON c.customer_id = r.customer_id
        JOIN
    inventory AS i ON i.inventory_id = r.inventory_id
        JOIN
    film_category AS fc ON fc.film_id = i.film_id
        JOIN
    category ca ON fc.category_id = ca.category_id
WHERE
    ca.name = 'horror';

Ans 4)
SELECT 
    CONCAT_WS(' ', first_name, last_name), title
FROM
    actor a
        JOIN
    film_actor fa ON a.actor_id = fa.actor_id
        JOIN
    film f ON fa.film_id = f.film_id
WHERE
    f.film_id IN (SELECT 
            film_id
        FROM
            film_actor
        WHERE
            a.actor_id = (SELECT 
                    actor_id
                FROM
                    actor
                WHERE
                    first_name = 'Jennifer'));

Ans 5)
SELECT 
    CONCAT_WS(' ', first_name, last_name)
FROM
    customer
WHERE
    customer_id IN (SELECT 
            customer_id
        FROM
            rental
        WHERE
            inventory_id IN (SELECT 
                    inventory_id
                FROM
                    inventory
                WHERE
                    film_id IN (SELECT 
                            film_id
                        FROM
                            film_category
                        WHERE
                            category_id IN (SELECT 
                                    category_id
                                FROM
                                    category
                                WHERE
                                    name = 'music'))));

Ans 6)
SELECT 
    customer_id, CONCAT_WS(' ', first_name, last_name)
FROM
    customer
WHERE
    customer_id IN (SELECT 
            customer_id
        FROM
            rental
        WHERE
            inventory_id IN (SELECT 
                    inventory_id
                FROM
                    inventory
                WHERE
                    film_id IN (SELECT 
                            film_id
                        FROM
                            film_category
                        WHERE
                            category_id IN (SELECT 
                                    category_id
                                FROM
                                    category
                                WHERE
                                    category_id = ALL (SELECT 
                                            category_id
                                        FROM
                                            category
                                        WHERE
                                            category_id <=5)))));
